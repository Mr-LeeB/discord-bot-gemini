import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import google.generativeai as genai
from image_generator import generate_image_with_gemini
import threading
from flask import Flask

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")
# image_model = genai.GenerativeModel("gemini-2.0-flash-exp-image-generation")

# Setup Flask gi·∫£ ƒë·ªÉ Render th·∫•y c√≥ c·ªïng m·ªü
app = Flask(__name__)


@app.route("/")
def home():
    return "‚úÖ Gemini Discord Bot is running!"


def run_web():
    port = int(os.environ.get("PORT", 10000))  # Render s·∫Ω truy·ªÅn PORT
    print(f"üåê Flask server running on port {port}")
    app.run(host="0.0.0.0", port=port)


# T·∫°o bot
intents = discord.Intents.default()
intents.message_content = True  # B·∫Øt bu·ªôc ƒë·ªÉ ƒë·ªçc message
bot = commands.Bot(command_prefix="!", intents=intents)


@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"ü§ñ Bot ƒë√£ s·∫µn s√†ng d∆∞·ªõi t√™n: {bot.user}")


# Dict l∆∞u chat session theo user
user_sessions = {}


@bot.tree.command(name="gemini", description="ƒê·∫∑t c√¢u h·ªèi cho Gemini")
async def gemini_chat(interaction: discord.Interaction, prompt: str):
    allowed_channels = ["gemini-chat", "ask-gemini"]

    if interaction.channel.name not in allowed_channels:
        await interaction.response.send_message(
            f"‚ùå L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong c√°c k√™nh: {', '.join(allowed_channels)}",
            ephemeral=True
        )
        return

    await interaction.response.defer()

    try:
        user_id = interaction.user.id

        # N·∫øu user ch∆∞a c√≥ session, t·∫°o m·ªõi
        if user_id not in user_sessions:
            user_sessions[user_id] = model.start_chat(history=[])

        chat = user_sessions[user_id]

        # G·ª≠i c√¢u h·ªèi v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini
        response = chat.send_message(prompt)
        reply = response.text

        MAX_LENGTH = 1900
        chunks = [reply[i:i+MAX_LENGTH]
                  for i in range(0, len(reply), MAX_LENGTH)]
        for chunk in chunks:
            await interaction.followup.send(chunk)

    except Exception as e:
        await interaction.followup.send(f"‚ùå L·ªói: {e}")


@bot.tree.command(name="reset_gemini", description="Xo√° ng·ªØ c·∫£nh tr√≤ chuy·ªán v·ªõi Gemini c·ªßa b·∫°n")
async def reset_gemini(interaction: discord.Interaction):
    user_id = interaction.user.id

    if user_id in user_sessions:
        del user_sessions[user_id]
        await interaction.response.send_message("‚úÖ ƒê√£ reset h·ªôi tho·∫°i v·ªõi Gemini.")
    else:
        await interaction.response.send_message("‚ÑπÔ∏è B·∫°n ch∆∞a c√≥ h·ªôi tho·∫°i n√†o ƒë·ªÉ reset.")


def refine_prompt_for_image(original_prompt: str) -> str:
    """D√πng Gemini ƒë·ªÉ vi·∫øt l·∫°i prompt t·∫°o ·∫£nh chi ti·∫øt h∆°n"""
    try:
        prompt = (
            "T√¥i mu·ªën b·∫°n vi·∫øt l·∫°i m√¥ t·∫£ ·∫£nh chi ti·∫øt v√† r√µ r√†ng h∆°n t·ª´ c√¢u sau, "
            "ƒë·ªÉ c√≥ th·ªÉ d√πng v·ªõi AI t·∫°o ·∫£nh. Ch·ªâ tr·∫£ v·ªÅ m√¥ t·∫£, kh√¥ng gi·∫£i th√≠ch th√™m. "
            "N·∫øu prompt vi·∫øt b·∫±ng ng√¥n ng·ªØ kh√°c ti·∫øng Vi·ªát, tr·∫£ v·ªÅ prompt g·ªëc.\n\n"
            f"Prompt g·ªëc: {original_prompt}"
        )
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o prompt chi ti·∫øt: {e}")
        return original_prompt


@bot.tree.command(name="image", description="T·∫°o ·∫£nh b·∫±ng Gemini t·ª´ m√¥ t·∫£ vƒÉn b·∫£n")
async def generate_image_command(interaction: discord.Interaction, prompt: str):
    allowed_channels = ["gemini-chat", "ask-gemini", "gemini-images"]

    if interaction.channel.name not in allowed_channels:
        await interaction.response.send_message(
            f"‚ùå L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong c√°c k√™nh: {', '.join(allowed_channels)}",
            ephemeral=True
        )
        return

    await interaction.response.defer()
    try:
        await interaction.followup.send("üé® Gemini ƒëang t·∫°o ·∫£nh, xin ch·ªù ch√∫t...")

        # C·∫£i thi·ªán prompt
        detailed_prompt = refine_prompt_for_image(prompt)
        # G·ªçi h√†m t·∫°o ·∫£nh t·ª´ image_generator
        image_data = generate_image_with_gemini(detailed_prompt)

        if image_data is None:
            await interaction.followup.send("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ·∫£nh t·ª´ Gemini. H√£y th·ª≠ m√¥ t·∫£ kh√°c r√µ r√†ng h∆°n.")
            return

        # G·ª≠i ·∫£nh v·ªÅ cho ng∆∞·ªùi d√πng
        file = discord.File(fp=image_data, filename="gemini_image.png")
        await interaction.followup.send(
            content=f"üì∑ ·∫¢nh ƒë∆∞·ª£c t·∫°o t·ª´ prompt: `{prompt}`\nPrompt chi ti·∫øt: `{detailed_prompt}`",
            file=file
        )

    except Exception as e:
        await interaction.followup.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {e}")

# Kh·ªüi ch·∫°y Flask + bot song song
if __name__ == "__main__":
    threading.Thread(target=run_web).start()
    bot.run(DISCORD_TOKEN)
